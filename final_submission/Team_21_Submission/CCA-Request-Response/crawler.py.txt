#!/usr/bin/env python
import tika
from tika import language
import cbor
import os
import json
import re
import httplib
import urllib
import unicodedata
from tika import parser

tika.initVM()

path = "/home/vinds/Kukku/sorteddata/crawl/test"

def get_filepaths(directory):
    json_file = open("output.json", "w")
    connToNLTK = httplib.HTTPConnection('localhost:8881')
    finaloutput = {}
    cleanText = "null"
    for root, directories, files in os.walk(directory):
        for filename in files:
	    print filename
	    metaJSON = {}
            filepath = os.path.join(root, filename)
	    #------------------File Size------------------------
	    filesize = os.stat(filepath).st_size
#	    print filepath

	    #------------------Tika MetaData and Content--------
	    try:
	        parsed = parser.from_file(filepath)
    	        metadata = parsed["metadata"]
    	        content = parsed["content"]
		parsedBy = metadata["X-Parsed-By"]
	    except:
		continue
	    if content is None:
		content =""

	    metaJSON["filepath"] = filepath		    
	    metaJSON["parsers"] = parsedBy
	    
	    #------------------Request and Response-------------------
	    #content = parsed["content"]
	    content = content.replace( 'u0000', "")
	    content = re.sub(r"\s+", " ",content)
	    content.encode('ascii','ignore')
	    keywords = re.findall(r'url["]\s{1}:\s{1}["].+["]timestamp["]', content)[0][:-11].split(":")[2][2:-3].split("/")
	    total = len(keywords)
	    if total > 3:
		category = keywords[-3]
	    else:
		category = "None"
	    match = 0
	    url = keywords[0]
	    #print url
	    urlMatch = False
	    matches = re.findall(url,content)
	    if matches > 1:
	        match+=total/2 
	    keywords.remove(url)
	    for keyword in keywords:
	        #print keyword
	        if '.' in keyword:
	    	    keys = keyword.split(".")
	    	    keyword = keys[0]
 	    #print keyword
	    matches = re.findall(keyword,content)
	    if len(matches) > 1:
		match+=1
	    #print len(matches)
	    #print "----------------------------------------"
	    #print "Match: "+str(match)
 	    #print "Total: "+str(total)
	    percent =  100 * float(match)/float(total)
	    percnt = "{0:.2f}".format(percent)+" %"	    
	    metaJSON["category"] = category
	    metaJSON["relevantPercentage"] = percnt
	    finaloutput[filename] = metaJSON
    json.dump(finaloutput, json_file, indent=2)    	  
    json_file.close()
    connToNLTK.close()
get_filepaths(path)
